#!/bin/bash
# -*- sh -*-
# vim: syntax=sh
# code: language=shellscript

# === repo name ============================================================== #

readonly repo_name_patern='^[A-Za-z0-9_-]+$'

if (($# == 0)); then
	echo "$0: missing argument: <repo_name>" >&2
	exit 4
elif [ -z "$1" ]; then
	echo "$0: argument may not be empty" >&2
	exit 9
elif [[ ! "$1" =~ $repo_name_patern ]]; then
	echo "$0: $1: does not match: /${repo_name_patern//\//\\\/}/" >&2
	exit 12
fi

readonly repo_name="$1"

# ============================================================================ #

readonly root_dir="$(realpath "$(dirname "$0")")"

# === user =================================================================== #

readonly user_file_path="$root_dir/user"
readonly user_file_rel_path="$(realpath --relative-to=. "$user_file_path")"

if [ ! -e "$user_file_path" ]; then
	echo "$0: $user_file_rel_path: no such file" >&2
	exit 24
elif [ ! -f "$user_file_path" ]; then
	echo "$0: $user_file_rel_path: not a file" >&2
	exit 26
elif [ ! -r "$user_file_path" ]; then
	echo "$0: $user_file_rel_path: permission denied" >&2
	exit 77
fi

readonly user="$(< "$user_file_path")"

readonly user_pattern='^[A-Za-z0-9_-]+$'
if [[ ! "$user" =~ $user_pattern ]]; then
	echo "$0: $user_file_rel_path: $user: does not match: /${user_pattern//\//\\\/}/"
	exit 79
fi

# ============================================================================ #
# === access token =========================================================== #

readonly access_token_file_path="$root_dir/access_token"
readonly access_token_file_rel_path="$(realpath --relative-to=. "$access_token_file_path")"

if [ ! -e "$access_token_file_path" ]; then
	echo "$0: $access_token_file_rel_path: no such file" >&2
	exit 24
elif [ ! -f "$access_token_file_path" ]; then
	echo "$0: $access_token_file_rel_path: not a file" >&2
	exit 26
elif [ ! -r "$access_token_file_path" ]; then
	echo "$0: $access_token_file_rel_path: permission denied" >&2
	exit 77
fi

readonly access_token="$(< "$access_token_file_path")"

if [ -z "$access_token" ]; then
	echo "$0: $access_token_file_rel_path: access token is empty" >&2
	exit 80
fi

# ============================================================================ #

declare exc

# === new labels ============================================================= #

readonly new_labels_json_file="$root_dir/github_issue_labels.json"
readonly new_labels_json_file_rel_path="$(realpath --relative-to=. "$new_labels_json_file")"

if [ ! -e "$new_labels_json_file" ]; then
	echo "$0: $new_labels_json_file_rel_path: no such file" >&2
	exit 24
elif [ ! -f "$new_labels_json_file" ]; then
	echo "$0: $new_labels_json_file_rel_path: not a file" >&2
	exit 26
elif [ ! -r "$new_labels_json_file" ]; then
	echo "$0: $new_labels_json_file_rel_path: permission denied" >&2
	exit 77
fi

declare new_labels_json
new_labels_json="$(jq -c 'map({name, description: (if .description == null then "" else .description end), color: (if .color == null then "000000" else .color end)})' "$new_labels_json_file" | sed s/'null'/'""'/g)"
exc=$?

if ((exc != 0)); then
	exit $exc
fi
readonly new_labels_json

readonly new_labels_count="$(jq 'length' <<< "$new_labels_json")"

# ============================================================================ #
# === fetching old labels ==================================================== #

echo 'Fetching old labels...'

declare old_labels_json
old_labels_json="$( \
	curl -s \
	-u "$user:$access_token" \
	-H "Accept: application/vnd.github.v3+json" \
	"https://api.github.com/repos/$user/$repo_name/labels" \
)"
exc=$?

if ((exc != 0)); then
	echo $exc
fi
readonly old_labels_json

readonly old_labels_count="$(jq 'length' <<< "$old_labels_json")"

declare old_labels=()
for ((i = 0; i < old_labels_count; ++i)); do
	old_labels+=("$(jq -r ".[$i].name" <<< "$old_labels_json")")
done; unset -v i
readonly old_labels

# ============================================================================ #

_url_encode() {
	local -r str="$1"
	local out=''

	local i c cp; for ((i = 0; i < ${#str}; ++i)); do
		c="${str:i:1}"
		cp="$(printf '%s' "$c" | hexdump -e '/1 "%02d"')"

		if [[ "$c" =~ ^[]:?\#@\!\$\&\'\"\(\)*+,\;=\ []$ ]] || ((cp > 127)); then
			out+="$(printf '%%%02X' "$cp")"
		else
			out+="$c"
		fi
	done; unset -v c i

	printf '%s' "$out"
}

# === deleting old labels ==================================================== #

echo

for old_label in "${old_labels[@]}"; do
	echo "Deleting old label '$old_label'..."

	curl -s \
		-X DELETE \
		-u "$user:$access_token" \
		-H "Accept: application/vnd.github.v3+json" \
		"https://api.github.com/repos/$user/$repo_name/labels/$(_url_encode "$old_label")" > '/dev/null'
	exc=$?

	if ((exc != 0)); then
		exit $exc
	fi
done; unset -v old_label

# ============================================================================ #
# === creating new labels ==================================================== #

echo

declare new_label_json; for ((i = 0; i < new_labels_count; ++i)); do
	new_label_json="$(jq -cM ".[$i]" <<< "$new_labels_json")"
	echo "Creating new label '$(jq -rM '.name' <<< "$new_label_json")'..."

	curl -s \
		-X POST \
		-u "$user:$access_token" \
		-H "Accept: application/vnd.github.v3+json" \
		"https://api.github.com/repos/$user/$repo_name/labels" \
		-d "$new_label_json" > '/dev/null'
	exc=$?

	if ((exc != 0)); then
		exit $exc
	fi
done; unset -v new_label_json

# ============================================================================ #

echo
echo "We're done. Everything should be fine!"
